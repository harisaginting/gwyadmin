// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/harisaginting/gwyn/models/dao"
	http "github.com/harisaginting/gwyn/models/http"

	mock "github.com/stretchr/testify/mock"

	models "github.com/harisaginting/gwyn/models"
)

// MockShortenRepository is an autogenerated mock type for the ShortenRepository type
type MockShortenRepository struct {
	mock.Mock
}

type MockShortenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShortenRepository) EXPECT() *MockShortenRepository_Expecter {
	return &MockShortenRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockShortenRepository) Create(ctx context.Context, req http.RequestCreate) (dao.Shorten, error) {
	ret := _m.Called(ctx, req)

	var r0 dao.Shorten
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.RequestCreate) (dao.Shorten, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.RequestCreate) dao.Shorten); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dao.Shorten)
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.RequestCreate) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortenRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockShortenRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req http.RequestCreate
func (_e *MockShortenRepository_Expecter) Create(ctx interface{}, req interface{}) *MockShortenRepository_Create_Call {
	return &MockShortenRepository_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockShortenRepository_Create_Call) Run(run func(ctx context.Context, req http.RequestCreate)) *MockShortenRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.RequestCreate))
	})
	return _c
}

func (_c *MockShortenRepository_Create_Call) Return(shorten dao.Shorten, err error) *MockShortenRepository_Create_Call {
	_c.Call.Return(shorten, err)
	return _c
}

func (_c *MockShortenRepository_Create_Call) RunAndReturn(run func(context.Context, http.RequestCreate) (dao.Shorten, error)) *MockShortenRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, p
func (_m *MockShortenRepository) Execute(ctx context.Context, p models.Shorten) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Shorten) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShortenRepository_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockShortenRepository_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - p models.Shorten
func (_e *MockShortenRepository_Expecter) Execute(ctx interface{}, p interface{}) *MockShortenRepository_Execute_Call {
	return &MockShortenRepository_Execute_Call{Call: _e.mock.On("Execute", ctx, p)}
}

func (_c *MockShortenRepository_Execute_Call) Run(run func(ctx context.Context, p models.Shorten)) *MockShortenRepository_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Shorten))
	})
	return _c
}

func (_c *MockShortenRepository_Execute_Call) Return(err error) *MockShortenRepository_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShortenRepository_Execute_Call) RunAndReturn(run func(context.Context, models.Shorten) error) *MockShortenRepository_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx
func (_m *MockShortenRepository) FindAll(ctx context.Context) ([]models.Shorten, error) {
	ret := _m.Called(ctx)

	var r0 []models.Shorten
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Shorten, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Shorten); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Shorten)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShortenRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockShortenRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockShortenRepository_Expecter) FindAll(ctx interface{}) *MockShortenRepository_FindAll_Call {
	return &MockShortenRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockShortenRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockShortenRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockShortenRepository_FindAll_Call) Return(data []models.Shorten, err error) *MockShortenRepository_FindAll_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockShortenRepository_FindAll_Call) RunAndReturn(run func(context.Context) ([]models.Shorten, error)) *MockShortenRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, p
func (_m *MockShortenRepository) Get(ctx context.Context, p *models.Shorten) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Shorten) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShortenRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockShortenRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - p *models.Shorten
func (_e *MockShortenRepository_Expecter) Get(ctx interface{}, p interface{}) *MockShortenRepository_Get_Call {
	return &MockShortenRepository_Get_Call{Call: _e.mock.On("Get", ctx, p)}
}

func (_c *MockShortenRepository_Get_Call) Run(run func(ctx context.Context, p *models.Shorten)) *MockShortenRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Shorten))
	})
	return _c
}

func (_c *MockShortenRepository_Get_Call) Return(err error) *MockShortenRepository_Get_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShortenRepository_Get_Call) RunAndReturn(run func(context.Context, *models.Shorten) error) *MockShortenRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShortenRepository creates a new instance of MockShortenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortenRepository {
	mock := &MockShortenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
