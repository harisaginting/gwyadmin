// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "github.com/harisaginting/gwyn/models/http"
	mock "github.com/stretchr/testify/mock"

	models "github.com/harisaginting/gwyn/models"
)

// MockShortenService is an autogenerated mock type for the ShortenService type
type MockShortenService struct {
	mock.Mock
}

type MockShortenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShortenService) EXPECT() *MockShortenService_Expecter {
	return &MockShortenService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockShortenService) Create(ctx context.Context, req http.RequestCreate) (http.ResponseCreate, int, error) {
	ret := _m.Called(ctx, req)

	var r0 http.ResponseCreate
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, http.RequestCreate) (http.ResponseCreate, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.RequestCreate) http.ResponseCreate); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(http.ResponseCreate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.RequestCreate) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, http.RequestCreate) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShortenService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockShortenService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req http.RequestCreate
func (_e *MockShortenService_Expecter) Create(ctx interface{}, req interface{}) *MockShortenService_Create_Call {
	return &MockShortenService_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockShortenService_Create_Call) Run(run func(ctx context.Context, req http.RequestCreate)) *MockShortenService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.RequestCreate))
	})
	return _c
}

func (_c *MockShortenService_Create_Call) Return(res http.ResponseCreate, status int, err error) *MockShortenService_Create_Call {
	_c.Call.Return(res, status, err)
	return _c
}

func (_c *MockShortenService_Create_Call) RunAndReturn(run func(context.Context, http.RequestCreate) (http.ResponseCreate, int, error)) *MockShortenService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, code
func (_m *MockShortenService) Execute(ctx context.Context, code string) (models.Shorten, int, error) {
	ret := _m.Called(ctx, code)

	var r0 models.Shorten
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Shorten, int, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Shorten); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(models.Shorten)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShortenService_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockShortenService_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockShortenService_Expecter) Execute(ctx interface{}, code interface{}) *MockShortenService_Execute_Call {
	return &MockShortenService_Execute_Call{Call: _e.mock.On("Execute", ctx, code)}
}

func (_c *MockShortenService_Execute_Call) Run(run func(ctx context.Context, code string)) *MockShortenService_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShortenService_Execute_Call) Return(res models.Shorten, status int, err error) *MockShortenService_Execute_Call {
	_c.Call.Return(res, status, err)
	return _c
}

func (_c *MockShortenService_Execute_Call) RunAndReturn(run func(context.Context, string) (models.Shorten, int, error)) *MockShortenService_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, res
func (_m *MockShortenService) List(ctx context.Context, res *http.ResponseList) error {
	ret := _m.Called(ctx, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.ResponseList) error); ok {
		r0 = rf(ctx, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShortenService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockShortenService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - res *http.ResponseList
func (_e *MockShortenService_Expecter) List(ctx interface{}, res interface{}) *MockShortenService_List_Call {
	return &MockShortenService_List_Call{Call: _e.mock.On("List", ctx, res)}
}

func (_c *MockShortenService_List_Call) Run(run func(ctx context.Context, res *http.ResponseList)) *MockShortenService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.ResponseList))
	})
	return _c
}

func (_c *MockShortenService_List_Call) Return(err error) *MockShortenService_List_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShortenService_List_Call) RunAndReturn(run func(context.Context, *http.ResponseList) error) *MockShortenService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx, code
func (_m *MockShortenService) Status(ctx context.Context, code string) (models.Shorten, int, error) {
	ret := _m.Called(ctx, code)

	var r0 models.Shorten
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Shorten, int, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Shorten); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(models.Shorten)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockShortenService_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockShortenService_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockShortenService_Expecter) Status(ctx interface{}, code interface{}) *MockShortenService_Status_Call {
	return &MockShortenService_Status_Call{Call: _e.mock.On("Status", ctx, code)}
}

func (_c *MockShortenService_Status_Call) Run(run func(ctx context.Context, code string)) *MockShortenService_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShortenService_Status_Call) Return(res models.Shorten, status int, err error) *MockShortenService_Status_Call {
	_c.Call.Return(res, status, err)
	return _c
}

func (_c *MockShortenService_Status_Call) RunAndReturn(run func(context.Context, string) (models.Shorten, int, error)) *MockShortenService_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShortenService creates a new instance of MockShortenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortenService {
	mock := &MockShortenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
